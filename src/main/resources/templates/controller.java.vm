package ${package.Controller};


import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.staffing.common.Result;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;
import java.util.List;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;

import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};

#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * @author JngKang
 * @date ${date}
 * @description
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
    #if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
    #else
public class ${table.controllerName} {
    #end

    @Resource
    private ${table.serviceName} ${table.entityPath}Service;

    /**
     * 新增和修改数据
     */
    @PostMapping
    public Result save(@RequestBody ${entity} ${table.entityPath}) {
        return Result.success(${table.entityPath}Service.saveOrUpdate(${table.entityPath}));
    }

	/**
	 * 新增数据
	 */
	@PostMapping("/insert")
	public Result insert(@RequestBody ${entity} ${table.entityPath}) {
		return Result.success(${table.entityPath}Service.insert(${table.entityPath}));
	}

    /**
     * 根据id删除数据
     */
    @DeleteMapping("/{id}")
    public Result delete(@PathVariable Integer id) {
        return Result.success(${table.entityPath}Service.removeById(id));
    }

    /**
     * 批量删除数据
     */
    @PostMapping("/del/batch")
    public Result deleteBatch(@RequestBody List<Integer> ids) {
        return Result.success(${table.entityPath}Service.removeByIds(ids));
    }

    /**
     * 查询所有数据
     */
    @GetMapping
    public Result findAll() {
        return Result.success(${table.entityPath}Service.list());
    }

    /**
     * 根据id查询一条数据
     */
    @GetMapping("/{id}")
    public Result findOne(@PathVariable Integer id) {
        return Result.success(${table.entityPath}Service.getById(id));
    }

    /**
     * 分页查询和搜索
     */
    @GetMapping("/page")
    public Result findPage(@RequestParam Integer pageNum,
                                    @RequestParam Integer pageSize,
                                    @RequestParam String search) {
        QueryWrapper<${entity}> queryWrapper = new QueryWrapper<>();
        if (!"".equals(search)) {
            // 检索条件
            // queryWrapper.like("username", search);// 若有多个and条件直接写多条此例
            // queryWrapper.or().like("nickname", search);// 若存在or条件写此例
			//queryWrapper.and( // 添加括号，并且以and连接
			//		QueryWrapper -> QueryWrapper.like("username", search)
			//				.or().like("nickname", search)
			//				.or().like("email", search)
			//);
        }
        return Result.success(${table.entityPath}Service.page(new Page<>(pageNum, pageSize), queryWrapper));
    }
}

#end